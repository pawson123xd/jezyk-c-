namespace program
{
    class Osobnik
    {
        public double[] wag;
        public double przystosowanie = 0;
        public byte[] chromosomy;
        public Osobnik()
        {
            wag = new double[3 * 3];
            chromosomy=new byte[9 *4];
            Random random = new Random();

            for (int i = 0; i < chromosomy.Length; i++)
            {
                chromosomy[i] = (byte)random.Next(0,2);
            }
        }
        public void dekodowanie(int ZBMIN, int ZBMAX)
        {
            double zb = ZBMAX - ZBMIN;
            for (int g = 0; g < 9; g++)
            {
                int miejsce = g * 4;
                int intVal = 0;

                for (int b = 0; b < 4; b++)
                {
                    intVal = intVal*2+chromosomy[miejsce + b];
                }
                double fraction = (double)intVal / (Math.Pow(2,4) - 1);
                wag[g] = ZBMIN + fraction * zb;
            }
        }
        public Osobnik Clone()
        {
            Osobnik nowy = new Osobnik();
            this.chromosomy.CopyTo(nowy.chromosomy, 0);
            nowy.przystosowanie = this.przystosowanie;
            return nowy;
        }
        public void Przystowanie()
        {
            dekodowanie(-10, 10);
            byte[,] daneWejsciowe = { { 0, 0 }, { 0, 1 }, { 1, 0 }, { 1, 1 } };
            przystosowanie = 0;
            for (int i = 0; i < 4; i++)
            {
                double wynik = Aktywacja(daneWejsciowe[i, 0], daneWejsciowe[i, 1]);
                double ocz = (byte)(daneWejsciowe[i, 0] ^ daneWejsciowe[i, 1]);
                przystosowanie += Math.Pow(ocz - wynik, 2);
            }
        }
        private double Aktywacja(byte we1, byte we2)
        {
            double suma = 0;
            double[] neuron = new double[2];
            neuron[0] = Sigmoida(wag[0] * we1 + wag[1] * we2 + wag[2]);
            neuron[1] = Sigmoida(wag[3] * we1 + wag[4] * we2 + wag[5]);
            suma += neuron[0]*wag[6] ;
            suma += neuron[1]*wag[7];
            suma += wag[8];
            return Sigmoida(suma);
        }
        private double Sigmoida(double x)
        {
            return 1 / (1 + Math.Exp(-x));
        }
    }
    class program
    {
        static void Main(string[] args)
        {
            int iteracja;
            int osobnicy = 13;
            List<Osobnik> stare = new List<Osobnik>();
            while (true)
            {
                Console.WriteLine("Podaj liczbe iteracja");
                iteracja = int.Parse(Console.ReadLine());
                if (iteracja < 100) {
                    Console.WriteLine("za malo");
                    continue;
                }
                break;
            }
            for (int i = 0; i < osobnicy; i++)
            {
                Osobnik osoba = new Osobnik();
                osoba.Przystowanie();
                stare.Add(osoba);
            }
            for (int i = 0; i < iteracja; i++) {
                List<Osobnik> pokolenie = new List<Osobnik>();
                double srednia = 0;
                pokolenie = Turniej(stare, osobnicy);
                kryzowanie(pokolenie[0], pokolenie[1]);
                kryzowanie(pokolenie[2], pokolenie[3]);
                kryzowanie(pokolenie[8], pokolenie[9]);
                kryzowanie(pokolenie[pokolenie.Count-2], pokolenie[pokolenie.Count-1]);
                pokolenie= mutacja(pokolenie);
                pokolenie.Add(hot_deck(stare));
                Osobnik najlepszy = pokolenie[0];
                foreach(Osobnik osoba in pokolenie)
                {
                    osoba.Przystowanie();
                    if (najlepszy.przystosowanie > osoba.przystosowanie)
                    {
                        najlepszy = osoba;
                    }
                    srednia += osoba.przystosowanie;
                }
                srednia = srednia / pokolenie.Count;
                Console.WriteLine("srednia jest rowna {0} a najmniejszy {1}", srednia,najlepszy.przystosowanie);
                stare = pokolenie;
            }
        }
        static List<Osobnik> Turniej(List<Osobnik> populacja, int osobnikow)
        {
            Random rand = new Random();
            List<Osobnik> osoby = new List<Osobnik>();
            for (int i = 0; i < osobnikow - 1; i++)
            {
                Osobnik[] rywale = new Osobnik[3];
                int[] pamiec = new int[3];
                for (int j = 0; j < 3; j++)
                {
                    int x1 = rand.Next(osobnikow);
                    pamiec[j] = x1;
                    for (int j2 = 0; j2 < pamiec.Length; j2++)
                    {
                        while (pamiec[j2] == x1)
                        {
                            x1 = rand.Next(osobnikow);
                        }
                    }
                    rywale[j] = populacja[x1];
                }
                Osobnik max = rywale[0];
                for (int j = 0; j < 3; j++)
                {
                    if (max.przystosowanie > rywale[j].przystosowanie)
                    {
                        max = rywale[j];
                    }
                }
                osoby.Add(max.Clone());
            }
            return osoby;
        }

        static void kryzowanie(Osobnik x1, Osobnik x2)
        {
            Random rand = new Random();
            int cienicie = rand.Next(0,35- 2);
            for (int i = cienicie + 1; i < x1.chromosomy.Length; i++)
            {
                byte pamieć = x1.chromosomy[i];
                x1.chromosomy[i] = x2.chromosomy[i];
                x2.chromosomy[i] = pamieć;
            }
        }
    static List<Osobnik> mutacja(List<Osobnik> populacja)
    {
        double prawdopodobienstwoMutacji = 0.2;
        Random rand = new Random();
        for(int j = 4; j < populacja.Count; j++)
        {
            for (int i = 0; i < populacja[j].chromosomy.Length; i++)
            {
                if (rand.NextDouble() < prawdopodobienstwoMutacji)
                {
                    if (populacja[j].chromosomy[i] == 0)
                    {
                        populacja[j].chromosomy[i] = 1;
                    }
                    else
                    {
                        populacja[j].chromosomy[i] = 0;
                    }
                }
            }
        }
        return populacja;
    }
        static Osobnik hot_deck(List<Osobnik> osoby)
        {
            Osobnik najlepszy = osoby[0];
            foreach (Osobnik osob in osoby)
            {
                if (najlepszy.przystosowanie > osob.przystosowanie)
                {
                    najlepszy = osob;
                }
            }
            return najlepszy.Clone();
        }
    }
}
